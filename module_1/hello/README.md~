File name: hello.c

**********************Description****************************
		This file is a simple Hello World module. 
		Contains basic module_init and module_exit functions.


*************************Drivers******************************
* The software that handles or manages a hardware controller is known as a device driver. It handles the communication between hardware and kernel.
* Device driver is to handle requests made by the kernel for particular type of device. Device driver acts as a well-defined and consistent interface for the kernel to make requests to hardware.
* Kernel runs in supervisor mode and communicates with a device through calls to a device driver.

**************************Module***************************
*Device driver program is  called as Module.
*Kernel modules are pieces of code that can be loaded and unloaded into the kernel upon demand. They extend the functionality of the kernel without the need to reboot the system.
*Every module works for specific device allocated for it.

***********Significance of all the files created during make*************
 * hello.c 
 * hello.ko       - object file linked to some kernel.
 * hello.mod.c    - Contains information about module which are require at time of insertion.
 * hello.mod.o and hello.o - they are linked together to form .ko file. 
 * module.symvers - Contains external symbol defined in the module,export declaration.   
 * modules.order  - It will list out the order in which compilation and creation of .ko occures. 

****************Functions used in the module**************
 * Init function - When module is loaded using insmod this function is called.
 * Exit function - When module is unloaded using rmmod this function is called.
 * printk -printk  classifies messages according to their severity by associating different loglevels, or priorities, with the messages.
	KERN_EMERG:

		Used for emergency messages, usually those that precede a crash.
	KERN_ALERT:

		Situation requiring immediate action.

	KERN_CRIT:

		Critical conditions, often related to serious hardware or software failures.

	KERN_ERR:

		Used to report error conditions; device drivers often use KERN_ERR to report hardware difficulties.

	KERN_WARNING:

		Warnings about problematic situations that do not, in themselves, create serious problems with the system.
	KERN_NOTICE:

		Situations that are normal, but still worthy of note. A number of security-related conditions are reported at this level.

	KERN_INFO:

		Informational messages. Many drivers print information about the hardware they find at startup time at this level.

	KERN_DEBUG:

		Used for debugging messages.

*******************Significance of the Makefile***************** 
* obj  -m  is for dynamic binding in the runtime. Entire kernel need not be recompiled, the module get dynamically binded.
* Makefile at /usr/src/linux-headers-4.4.0-148-generic location make the object file that is why we pass  .o 
* make -C $(KERNEL_SOURCE) M=$(PWD) modules 
       -C means change of directory 
       -M means modules 


Steps to compile :
1.Run				make
2.Insert module			sudo insmod hello.ko (inserting module in sys/module)
3.See the added module		cat /proc/modules | grep hello (lsmod)
4.To get information about 
a Module (author)  		modinfo hello.ko
5.See the logs in dmesg 	dmesg | tail -10     (to see kernel prints)	
6.Remove module			sudo rmmod hello
7.Run				make clean
