/************************************************************************************************
@ileName : hello.c
@author	 : Palak Jain
@teamLead: Rajesh Dommaraju 
@etails  : It is a simple HelloWorld driver to load a module in the kernel  
@icense  : SpanIdea Systems Pvt. Ltd. All rights reserved.
************************************************************************************************/

/*******************************************************************************
			INCLUDES
*******************************************************************************/

#include <linux/init.h> //includes init and exit function 
#include <linux/module.h> //to include information like License, Author, Module Description, Module Version
#include<linux/kernel.h>//for kernel functions 
#include<linux/moduleparam.h> //parameter passing 
/*******************************************************************************
			 LOCAL MACROS		
*******************************************************************************/

#define GPL_LICENSE				"GPL"
#define DRIVER_MODULE_AUTHOR			"PALAK"
#define DRIVER_MODULE_DESC			"Simple Hello World Module with parameter passing"
#define DRIVER_MODULE_VERSION			"V1.1.0"

/*******************************************************************************
			 LOCAL TYPEDEFS		
*******************************************************************************/

/*******************************************************************************
			GLOBAL VARIABLES		
*******************************************************************************/

/*******************************************************************************
			LOCAL VARIABLES		
*******************************************************************************/
int my_value, my_arr_value[4];
char *my_name;
int my_cb_value = 0;
/*******************************************************************************
			LOCAL FUNCTIONS		
*******************************************************************************/
module_param(my_value, int, S_IRUSR|S_IWUSR);                      //integer value
module_param(my_name, charp, S_IRUSR|S_IWUSR);                     //String
module_param_array(my_arr_value, int, NULL, S_IRUSR|S_IWUSR);      //Array of integers
/*----------------------Module_param_cb()--------------------------------*/
int notify_param(const char *val, const struct kernel_param *kp)
{
        int res = param_set_int(val, kp); // Use helper for write variable
        if(res==0) {
                printk(KERN_INFO "Call back function called...\n");
                printk(KERN_INFO "New value of my_cb_value = %d\n", my_cb_value);
                return 0;
        }
        return -1;
}
// to get notification whenever value got change. we need to register our handler function to its file operation structure.
const struct kernel_param_ops my_param_ops = 
{
        .set = &notify_param, // Use our setter ...
        .get = &param_get_int, // .. and standard getter
};

module_param_cb(my_cb_value, &my_param_ops, &my_cb_value, S_IRUGO|S_IWUSR );
/*******************************************************************************
			EXPORT SNIPPET		
*******************************************************************************/
int my_count =0;
void my_shared_func(void)
{ 
	printk(KERN_INFO"shared function is been called!!!\n");
	my_count++;
}
//EXPORT_SYMBOL_GPL(my_shared_func);
EXPORT_SYMBOL(my_shared_func);
EXPORT_SYMBOL(my_count);
/**********************************************************************************************
function	 : hello_init
description	 : This function is initialised when module gets inserted.
		   This function is passed as an argument to module_init.
input param      : NONE
output param     : NONE
**********************************************************************************************/
static int __init hello_world_init(void)
{
        int i;
        printk(KERN_INFO "my_value = %d  \n", my_value);
        printk(KERN_INFO "my_cb_value = %d  \n", my_cb_value);
        printk(KERN_INFO "my_name = %s \n", my_name);
        for (i = 0; i < (sizeof my_arr_value / sizeof (int)); i++) {
                printk(KERN_INFO "Arr_value[%d] = %d\n", i, my_arr_value[i]);
        }
        printk(KERN_INFO "Kernel Module Inserted Successfully...\n");
	return 0;
}
/**********************************************************************************************
function	 : hello_exit
description	 : This function is initialised when module gets unloaded from kernel.
		   This function is passed as an argument to module_exit.
input param      : NONE
output param     : NONE
**********************************************************************************************/
void __exit hello_world_exit(void)
{
	printk(KERN_INFO "Kernel Module Removed Successfully...\n");
}
// sequence in which the module run 
module_init(hello_world_init);
module_exit(hello_world_exit);

//file information 
MODULE_LICENSE(GPL_LICENSE);
MODULE_AUTHOR(DRIVER_MODULE_AUTHOR);
MODULE_VERSION(DRIVER_MODULE_VERSION);
MODULE_DESCRIPTION(DRIVER_MODULE_DESC);

