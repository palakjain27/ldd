File : real_driver.c 

********************Description*******************************
***************************************************************
		  character driver 
***************************************************************
Drivers for byte-oriented operations are referred as character drivers.

application -> device file -> major minor no -> device driver -> hardware

Device file : Driver will create the special file for every hardware devices. We can communicate to the hardware using those special files (device file).

****************************************************************
This directory contains three files.
1.Driver   	   -Driver is running on kernel space.
2.Make File 	   -Makefile is used to build the kernel linux device driver.
3.User Application -User application will running on the user space and communicate to driver on kernel space.
User Program will communicate with the kernel space program using device file.
*****************************************************************
*********************Programming********************************
Function used:
*****************************************************************
1.void *kmalloc(size_t size, gfp_t flags);
	size_t size– how many bytes of memory are required.
	gfp_t flags– the type of memory to allocate.

The flags argument may be one of:

	GFP_USER – Allocate memory on behalf of user. May sleep.
	GFP_KERNEL – Allocate normal kernel ram. May sleep.
	GFP_ATOMIC – Allocation will not sleep. May use emergency pools. For example, use this inside interrupt handlers.
	GFP_HIGHUSER – Allocate pages from high memory.
	GFP_NOIO – Do not do any I/O at all while trying to get memory.
	GFP_NOFS – Do not make any fs calls while trying to get memory.
	GFP_NOWAIT – Allocation will not sleep.
	__GFP_THISNODE – Allocate node-local memory only.
	GFP_DMA – Allocation suitable for DMA. Should only be used for kmalloc caches. Otherwise, use a slab created with SLAB_DMA.
*****************************************************************************

2.void kfree(const void *objp)

	*objp – pointer returned by kmalloc
*****************************************************************************
Write operation

3.unsigned long copy_from_user(void *to, const void __user *from, unsigned long  n);
	to – Destination address, in kernel space
	from – Source address in user space
	n – Number of bytes to copy
*****************************************************************************
read operation

4.copy_to_user()
This function is used to Copy data into user space (Copy data from kernel space to user space).

unsigned long copy_to_user(const void __user *to, const void *from, unsigned long  n);
	to – Destination address, in user space
	from – Source address in kernel space
	n – Number of bytes to copy
******************************************************************************

4.Major no -The major number identifies the driver associated with the device. A major number can also be shared by multiple device drivers./proc/devices

5.Minor no -The device driver uses the minor number <minor> to distinguish individual physical or logical devices.
******************************************************************************
6.Allocating major and minor no.
	a.Statically allocating

	int register_chrdev_region(dev_t first, unsigned int count, char *name);
		* The dev_t type (defined in <linux/types.h>) is used to hold device numbers.
		* successful registration returns 0 otherwise negative no.
		* first is the beginning device number of the range you would like to allocate
		* count is the total number of contiguous device numbers you are requesting
		* name is the name of the device that should be associated with this number range; it will appear in /proc/devices and sysfs.

	b.Dynamically allocating 

	int alloc_chrdev_region(dev_t *dev, unsigned int firstminor, unsigned int count, char *name);
		* name is the name of the device that should be associated with this number range; it will appear in /proc/devices and sysfs
		* dev is an output-only parameter that will, on successful completion, hold the first number in your allocated range.
		* firstminor should be the requested first minor number to use; it is usually 0.
		* count is the total number of contiguous device numbers you are requesting.
		* name is the name of the device that should be associated with this number range; it will appear in /proc/devices and sysfs.

Note: The disadvantage of dynamic assignment is that you can’t create the device nodes in advance. Check the device registration : cat /proc/devices | grep "my_Dev"

*********************************************************************************
7.void unregister_chrdev_region(dev_t first, unsigned int count);
*********************************************************************************
8.Creating device file 
Device files provide a convenient way to access system resources without requiring the applications programmer to know how the underlying device works.
	a.Manually 
	    mknod -m <permissions> <name> <device type> <major> <minor>     
	    ex: mknod -m 666 /dev/my_device c 246 0   check :ls -l /dev/ | grep "my_device"
	    <name> – your device file name that should have full path (/dev/name)
	    <device type> – Put c or b
		c – Character Device
		b – Block Device
	    <major> – major number of your driver
	    <minor> – minor number of your driver
	    -m <permissions> – optional argument that sets the permission bits of the new device file to permissions
	
	b.automatically
	The automatic creation of device files can be handled with udev. Udev is the device manager for the Linux kernel that creates/removes device nodes in the /dev directory dynamically.
	create class  --/sys/class/(to identify different types of drivers)
	1.struct class * class_create (struct module *owner, const char *name);
		owner – pointer to the module that is to “own” this struct class
		name – pointer to a string for the name of this class
	void class_destroy (struct class * cls);
		
	2.create device file   --A struct device will be created in sysfs, registered to the specified class.(sys/my_class/my_device)
	struct device *device_create (struct *class, struct device *parent,dev_t dev, const char *fmt, ...);
		class – pointer to the struct class that this device should be registered to
		parent – pointer to the parent struct device of this new device, if any
		devt – the dev_t for the char device to be added
		fmt – string for the device’s name
	void device_destroy (struct class * class, dev_t devt);

********************************************************************************
9.Cdev structure
In linux kernel struct inode structure is used to represent files. struct cdev is one of the elements of the inode structure.An inode structure is used by the kernel internally to represent files. The struct cdev is the kernel’s internal structure that represents char device.
There are two ways of allocating and initializing one of these structures.

    Runtime Allocation
	struct cdev *my_cdev = cdev_alloc( );
	my_cdev->ops = &my_fops;
    Own allocation
	void cdev_init(struct cdev *cdev, struct file_operations *fops);
	int cdev_add(struct cdev *dev, dev_t num, unsigned int count);
	void cdev_del(struct cdev *dev);
	
	dev is the cdev structure,
	num is the first device number to which this device responds file operation structure 
It is how a char driver sets up this connection defined in <linux/fs.h>, is a collection of function pointers.A file_operations structure or a pointer to one is called fops.It contains all read write,open, release functions.
*****************************************************************************		
Steps to compile :
1.Run				make
2.Insert module			sudo insmod real_driver.ko
3.Writing 			echo 1 > /dev/my_device
4.Reading			cat /dev/my_device
5.compile and run test_app	gcc -o test_app test_app.c
				sudo ./test_app

